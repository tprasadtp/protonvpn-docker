#!/usr/bin/with-contenv bash
# shellcheck shell=bash

export LOG_FMT="full"
if [[ $DEBUG == "1" ]]; then
  export LOG_LVL=0
fi

if [[ -f /usr/share/shlib/logger.sh ]]; then
  # shellcheck disable=SC1091
  source /usr/share/shlib/logger.sh
else
  echo "[ERROR ] Failed to load logging library expected at /usr/share/shlib/logger.sh"
  exit 1
fi

if [[ $DEBUG == "1" ]]; then
  LOG_LVL="0"
fi

# Reset disconnect mode flag
PROTONVPN_SVC_DISCONNECTING=0

_term() {
  log_info "Caught SIGTERM signal!"
  # Dont reconnect if already in term mode
  PROTONVPN_SVC_DISCONNECTING=1
  log_info "Disconnecting!"
  if PVPN_DEBUG="${DEBUG:-0}" protonvpn disconnect; then
    log_success "Disconnected"
  else
    log_error "Failed to disconnect!"
  fi
}

trap _term SIGTERM SIGINT

function connect_vpn() {

  if [[ -z ${PROTONVPN_SERVER} ]]; then
    log_error "Specify PROTONVPN_SERVER(${PROTONVPN_SERVER})"
    exit 4
  fi

  if [[ ${PROTONVPN_SERVER^^} =~ ^[A-Z]{2}$ ]]; then
    log_notice "Using fastest server from COUNTRY: ${PROTONVPN_SERVER^^}"
    PVPN_DEBUG="${DEBUG:-0}" protonvpn connect --cc "${PROTONVPN_SERVER^^}"

  elif [[ ${PROTONVPN_SERVER} == "RANDOM" ]]; then
    log_notice "Using a RANDOM server"
    PVPN_DEBUG="${DEBUG:-0}" protonvpn connect --random

  elif [[ ${PROTONVPN_SERVER} == "P2P" ]]; then
    if [[ ${PROTONVPN_TIER} -lt 1 ]]; then
      log_error "Using P2P requires basic plan or above!"
      exit 4
    else
      log_notice "Using fastest available P2P server"
      PVPN_DEBUG="${DEBUG:-0}" protonvpn connect --p2p
    fi

  else
    log_notice "Connecting to server: ${PROTONVPN_SERVER}"
    PVPN_DEBUG="${DEBUG:-0}" protonvpn connect "${PROTONVPN_SERVER}"
  fi
}

function reconnect_vpn() {
  log_warning "Reconnecting..."
  if PVPN_DEBUG="${DEBUG:-0}" protonvpn r; then
    log_success "Reconnection successful"
  else
    log_error "Failed to reconnect"
    log_warning "Trying with a fresh connection!"
    connect_vpn
  fi
}

function api_check() {
  if healthcheck; then
    log_success "VPN is running and healthy"
    thrshold_f=0
  else
    log_error "Healthcheck #$((++thrshold_f)) Failed!"
    log_error "Connected to #${COUNTRY} instead of #${PROTONVPN_COUNTRY}"
    if [[ $thrshold_f -gt "${PROTONVPN_FAIL_THRESHOLD}" ]]; then
      log_error "Reconnecting! (${PROTONVPN_FAIL_THRESHOLD})"
      reconnect_vpn
    fi
  fi
}

function check_vpn() {
  # Check if openvpnv process is running.
  if [[ ${PROTONVPN_SVC_DISCONNECTING} -ne 1 ]]; then
    if [[ -z "$(pgrep -x openvpn)" ]]; then
      log_error "There is no OpenVPN Process!!"
      reconnect_vpn
    else
      api_check
    fi
  else
    log_debug "Skipped checks beacuse container is terminating"
  fi
}

function main() {
  re='^[0-9]+$'
  if ! [[ $PROTONVPN_CHECK_INTERVAL =~ $re ]]; then
    log_warning "PROTONVPN_CHECK_INTERVAL can only be an integer!, will default to 90 seconds"
    PROTONVPN_CHECK_INTERVAL=90
  else
    log_info "PROTONVPN_CHECK_INTERVAL is set to #$PROTONVPN_CHECK_INTERVAL"
  fi

  if ! [[ $PROTONVPN_FAIL_THRESHOLD =~ $re ]]; then
    log_warning "PROTONVPN_FAIL_THRESHOLD can only be an integer!, will default to 3"
    PROTONVPN_FAIL_THRESHOLD=3
  else
    log_info "Reconnect threshold is #$PROTONVPN_FAIL_THRESHOLD"
  fi

  log_info "Checking orphaned openvpn process"
  OVPN_PROCESS="$(pgrep -x openvpn)"
  if [[ -z ${OVPN_PROCESS} ]]; then
    log_info "This appears to be a fresh start!"
    thrshold_f=0
    connect_vpn
  else
    log_info "This appears to be a restart!, reconnecting with old settings"
    thrshold_f=0
    reconnect_vpn
  fi

  # Checks
  while :; do
    log_debug "Is service disconnecting: ${PROTONVPN_SVC_DISCONNECTING}"
    check_vpn
    sleep "${PROTONVPN_CHECK_INTERVAL}" &
    wait $!
  done
}

main "$@"
