#!/usr/bin/with-contenv bash
# shellcheck shell=bash

# Reset disconnect mode flag
PROTONVPN_SVC_DISCONNECTING=0

_term() {
  echo "[Service Terminate] Caught SIGTERM signal!"
  # Dont reconnect if already in term mode
  PROTONVPN_SVC_DISCONNECTING=1
  echo "[Service Terminate] Disconnecting!"
  if PVPN_DEBUG="${DEBUG:-0}" protonvpn disconnect; then
    echo "[Service Terminate] Diconnected"
  else
    echo "[Service Terminate] Failed"
  fi
}

trap _term SIGTERM SIGINT

readonly SVC_INIT="[Service - INIT]"
readonly SVC_CONN="[Service - CONN]"
readonly SVC_RCON="[Service - RCON]"
readonly SVC_CHCK="[Service - CHCK]"


function connect_vpn()
{
  if [[ -z $PROTONVPN_SERVER ]] && [[ -n ${PROTONVPN_COUNTRY} ]]; then
    echo "${SVC_CONN} Using Fastest Server from ${PROTONVPN_COUNTRY}"
    PVPN_DEBUG="${DEBUG:-0}" protonvpn connect --cc "${PROTONVPN_COUNTRY}"
  elif [[ ${PROTONVPN_SERVER} == "RANDOM" ]] && [[ -n ${PROTONVPN_COUNTRY} ]]; then
    echo "${SVC_CONN} Using Random Server"
    PVPN_DEBUG="${DEBUG:-0}" protonvpn connect --random
  elif [[ -z $PROTONVPN_COUNTRY ]] && [[ -n ${PROTONVPN_SERVER} ]]; then
    echo "${SVC_CONN} Using Server ${PROTONVPN_SERVER}"
    PVPN_DEBUG="${DEBUG:-0}" protonvpn connect "${PROTONVPN_SERVER}"
  else
    echo "${SVC_CONN} Specify either PROTONVPN_SERVER(${PROTONVPN_SERVER}) or PROTONVPN_COUNTRY(${PROTONVPN_COUNTRY})"
    exit 4
  fi
}


function reconnect_vpn()
{
  echo "${SVC_RCON} Attempting..."
  if PVPN_DEBUG="${DEBUG:-0}" protonvpn r; then
    echo "${SVC_RCON} Successful"
  else
    echo "${SVC_RCON} Failure!"
    echo "${SVC_RCON} Trying with a fresh connection!"
    connect_vpn
  fi
}


function api_check()
{
  COUNTRY="$(curl \
    --max-time 20 \
    --silent \
    --location \
    https://ipinfo.io | jq -r '.country')"

  if [[ -z ${PROTONVPN_COUNTRY} ]]; then
    PROTONVPN_COUNTRY="$(python3 /usr/local/bin/proton-srv-country)"
  fi

  if [[ $COUNTRY == "${PROTONVPN_COUNTRY}" ]]; then
    echo "${SVC_CHCK} OK!"
    thrshold_f=0
  else
    echo "${SVC_CHCK} #$(( ++thrshold_f )) Failed!"
    echo "${SVC_CHCK} connected to #${COUNTRY} instead of #${PROTONVPN_COUNTRY}"
    if [[ $thrshold_f -gt "${PROTONVPN_FAIL_THRESHOLD}" ]];then
      echo "${SVC_CHCK} failed > allowed times(${PROTONVPN_FAIL_THRESHOLD}), reconnecting!"
      reconnect_vpn
    fi
  fi
}

function check_vpn()
{
  # Check if openvpnv process is running.
  if [[ ${PROTONVPN_SVC_DISCONNECTING} -ne 1 ]]; then
    if [[ -z "$(pgrep -x openvpn)" ]]; then
      echo "${SVC_CHCK} Error!! There is no OpenVPN Process!!"
      reconnect_vpn
    else
      api_check
    fi
  else
    echo "${SVC_CHCK} Skipped checks beacuse we are terminating"
  fi
}


function main()
{

  re='^[0-9]+$'
  if ! [[ $PROTONVPN_CHECK_INTERVAL =~ $re ]] ; then
    echo "${SVC_INIT} PROTONVPN_CHECK_INTERVAL can only be an integer!, will default to 60 seconds"
    PROTONVPN_CHECK_INTERVAL=60
  else
    echo "${SVC_INIT} Daemon check interval is set to #$PROTONVPN_CHECK_INTERVAL"
  fi

  if ! [[ $PROTONVPN_FAIL_THRESHOLD =~ $re ]] ; then
    echo "${SVC_INIT} PROTONVPN_FAIL_THRESHOLD can only be an integer!, will default to 10"
    PROTONVPN_FAIL_THRESHOLD=10
  else
    echo "${SVC_INIT} Reconnect treshold is #$PROTONVPN_FAIL_THRESHOLD"
  fi

  echo "${SVC_INIT} checking orphaned openvpn process"
  OVPN_PROCESS="$(pgrep -x openvpn)"
  if [[ -z ${OVPN_PROCESS} ]]; then
    echo "${SVC_INIT} This appears to be a fresh start!"
    thrshold_f=0
    connect_vpn
  else
    echo "${SVC_INIT} This appears to be a restart!, reconnecting to VPN with old settings"
    thrshold_f=0
    reconnect_vpn
  fi

  # Checks
  while :
  do
    echo "${SVC_INIT} PROTONVPN_SVC_DISCONNECTING: ${PROTONVPN_SVC_DISCONNECTING}"
    check_vpn
    sleep "${PROTONVPN_CHECK_INTERVAL}" &
    wait $!
  done
}

main "$@"
