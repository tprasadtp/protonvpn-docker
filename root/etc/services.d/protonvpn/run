#!/usr/bin/with-contenv bash

_term() {
  echo "[Service Terminate] Caught SIGTERM signal!"
  PVPN_DEBUG="${DEBUG:-0}" /usr/local/bin/protonvpn disconnect
}

trap _term SIGINT
trap _term SIGTERM

function connect_vpn()
{
  if [[ -z "$PROTONVPN_SERVER" ]] &&  [[ -n ${PROTONVPN_COUNTRY} ]]; then
    echo "[Service Connect] Using Fastest Server from ${PROTONVPN_COUNTRY}"
    PVPN_DEBUG="${DEBUG:-0}" /usr/local/bin/protonvpn connect --cc "${PROTONVPN_COUNTRY}"
  elif [[ -z "$PROTONVPN_COUNTRY" ]] &&  [[ -n ${PROTONVPN_SERVER} ]]; then
    echo "[Service Connect] Using Server ${PROTONVPN_SERVER}"
    PVPN_DEBUG="${DEBUG:-0}" /usr/local/bin/protonvpn connect "${PROTONVPN_SERVER}"
  else
    echo "[Service Error] Specify either PROTONVPN_SERVER(${PROTONVPN_SERVER}) or PROTONVPN_COUNTRY(${PROTONVPN_COUNTRY})"
    exit 4
  fi
}


function reconnect_vpn()
{
  echo "[Service Reconnect] Attempting..."
  if PVPN_DEBUG="${DEBUG:-0}" /usr/local/bin/protonvpn r; then
    echo "[Service Reconnect] Successful"
  else
    echo "[Service Reconnect] Failure!"
    echo "[Service Reconnect] Trying with a fresh connection!"
    connect_vpn
  fi
}


function api_check()
{
  COUNTRY="$(curl \
    --max-time 20 \
    --silent \
    --location \
    https://ipinfo.io | jq -r '.country')"

  if [[ -z ${PROTONVPN_COUNTRY} ]]; then
    PROTONVPN_COUNTRY="$(python3 /usr/local/bin/proton-srv-country)"
  fi

  if [[ $COUNTRY == "${PROTONVPN_COUNTRY}" ]]; then
    echo "[Service Check] OK!"
    thrshold_f=0
  else
    echo "[Service Check] #$(( ++thrshold_f )) Failed!"
    echo "[Service Check] connected to #${COUNTRY} instead of #${PROTONVPN_COUNTRY}"
    if [[ $thrshold_f -gt "${RECONNECT_THRESHOLD}" ]];then
      echo "[Service Check] failed > allowed times(${RECONNECT_THRESHOLD}), reconnecting!"
      reconnect_vpn
    fi
  fi
}

function check_vpn()
{
# Because protonvpn-cli is a mess. Yes they too check it with PIDs no API is available to verify it.
# It is giant mess of subprocess.call(***). They are improving it though...
if [[ -z "$(pgrep -x openvpn)" ]]; then
  echo "[Service Check] Error!! There is no OpenVPN Process!!"
  reconnect_vpn
else
  api_check
fi
}


function main()
{

  re='^[0-9]+$'
  if ! [[ $LIVE_PROBE_INTERVAL =~ $re ]] ; then
    echo "LIVE_PROBE_INTERVAL can only be an integer!, will default to 60 seconds"
    LIVE_PROBE_INTERVAL=60
  else
    echo "Daemon check interval is set to #$LIVE_PROBE_INTERVAL"
  fi

  if ! [[ $RECONNECT_THRESHOLD =~ $re ]] ; then
    echo "RECONNECT_THRESHOLD can only be an integer!, will default to 10"
    RECONNECT_THRESHOLD=10
  else
    echo "Reconnect treshold is #$RECONNECT_THRESHOLD"
  fi

  echo "[Service Init] checking orphaned openvpn process"
  OVPN_PROCESS="$(pgrep -x openvpn)"
  if [[ -z ${OVPN_PROCESS} ]]; then
    echo "[Service Init] This appears to be a fresh start!"
    thrshold_f=0
    connect_vpn
  else
    echo "[Service Init] This appears to be a restart!, reconnecting to VPN with old settings"
    thrshold_f=0
    reconnect_vpn
  fi

  # Checks
  while :
  do
    check_vpn
    sleep "${LIVE_PROBE_INTERVAL}" &
    wait $!
  done
}

main "$@"
