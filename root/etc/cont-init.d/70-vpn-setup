#!/usr/bin/with-contenv bash
# shellcheck shell=bash
set -eo pipefail

if [[ -z "$PROTONVPN_USERNAME" ]]; then
  echo "No Username specified!"
  exit 2
fi

if [[ -z "$PROTONVPN_PASSWORD" ]]; then
  echo "No Password specified!"
  exit 3
fi

if [[ -z "$PROTONVPN_SERVER" ]] &&  [[ ! -z ${PROTONVPN_COUNTRY} ]]; then
  echo "[VPN-Config-Setup] Using Fastest Server from ${PROTONVPN_COUNTRY}"
elif [[ -z "$PROTONVPN_COUNTRY" ]] &&  [[ ! -z ${PROTONVPN_SERVER} ]]; then
  echo "[VPN-Config-Setup] Using Server ${PROTONVPN_SERVER}"
else
  echo "[VPN-Config-Setup] Specify either PROTONVPN_SERVER(${PROTONVPN_SERVER}) or PROTONVPN_COUNTRY(${PROTONVPN_COUNTRY})"
  exit 4
fi

case ${PROTONVPN_TIER} in
  0 | free | Free | FREE)                echo "[VPN-Config-Setup] Free Plan";CFG_TIER=0;;
  1 | basic | Basic | BASIC)             echo "[VPN-Config-Setup] Basic Plan";CFG_TIER=1;;
  2 | plus | Plus | PLUS)                echo "[VPN-Config-Setup] Plus Plan";CFG_TIER=2;;
  3 | visionary | Visionary | VISIONARY) echo "[VPN-Config-Setup] Visionary Plan";CFG_TIER=3;;
  *)                                     echo "Invalid ProtonVPN Tier, Can only accept 0-3";exit 4;;
esac

case ${PROTONVPN_PROTOCOL} in
  tcp | TCP)                    echo "[VPN-Config-Setup] UDP";CFG_PROTO="tcp";;
  udp | UDP)                    echo "[VPN-Config-Setup] TCP";CFG_PROTO="udp";;
  *)                            echo "[VPN-Config-Setup] Invalid Proto ${PROTONVPN_PROTOCOL}, Falling back to UDP";
                                CFG_PROTO="udp";;
esac


IP_ADD_REGEX='([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])'
SUBNET_REGEX='([0-9]|[12][0-9]|3[012])'

cidrs_from_env=(${PROTONVPN_EXCLUDE_CIDRS//,/ })

declare -g -a SPLIT_TUNNEL_CIDRS INVALID_CIDRS

# Split Tunnels
if [[ ${#cidrs_from_env[@]} -gt 0 ]]; then
  echo "[VPN-Config-Split] Validating CIDRs"
  for cidr in "${cidrs_from_env[@]}"; do
    if [[ $cidr =~ ^$IP_ADD_REGEX(\.$IP_ADD_REGEX){3}/$SUBNET_REGEX$ ]]; then
      echo "[VPN-Config-Split] CIDR $cidr is valid"
      SPLIT_TUNNEL_CIDRS+=("$cidr")
    else
      echo "[VPN-Config-Split] CIDR $cidr is INVALID"
      INVALID_CIDRS+=("$cidr")
    fi
  done
else
  echo "[VPN-Config-Split] No need to setup split Tunnels"
fi

if [[ ${#INVALID_CIDRS[@]} -gt 0 ]];then
  echo "[VPN-Config-Split] Following CIDRs were invalid: ${INVALID_CIDRS[*]}"
  exit 5
fi

# Setup DNS leak protection
if [[ ${PROTONVPN_DNS_LEAK_PROTECT} -eq 0 ]]; then
  echo "[VPN-Config-DNS  ] Disabling DNS leak protection!!"
  DNS_LEAK_PROTECTION=0
else
  echo "[VPN-Config-DNS  ] Enabling DNS leak protection."
  DNS_LEAK_PROTECTION=1
fi

# Handle Split Tunnels
if [[ ${#SPLIT_TUNNEL_CIDRS[@]} -gt 0 ]];then
  echo "[VPN-Config-Split] Following CIDRs will be excluded from VPN ${SPLIT_TUNNEL_CIDRS[*]}"
  ENABLE_SPLIT_TUNNEL=1
else
  echo "[VPN-Config-Split] Disabled"
  ENABLE_SPLIT_TUNNEL=0
fi

echo "[Path Init       ] Creating folders"
mkdir -p /root/.pvpn-cli/

# permissions
echo "[Path Init       ] Permissions"
chown root:root /root/.pvpn-cli/

# Pull Server Info
echo "[VPN-Config-Setup] Getting Server List"
curl --fail \
    --location \
    --silent \
    --show-error \
    --max-time 20 \
    --silent \
    --location \
    --user-agent 'protonvpn-cli-docker' \
    --header 'x-pm-appversion: LinuxVPN_2.2.6' \
    --header 'x-pm-apiversion: 3' \
    --header 'Accept: application/vnd.protonmail.v1+json' \
    --output /root/.pvpn-cli/serverinfo.json \
    https://api.protonvpn.ch/vpn/logicals

__METADATA_PULL_DATE="$(date +%s)"

echo "[VPN-Config-Setup] Writing config file"
cat > /root/.pvpn-cli/pvpn-cli.cfg <<EOF
[USER]
# API endpoint
api_domain = https://api.protonvpn.ch
username = ${PROTONVPN_USERNAME}
# Proton VPN Plan ${PROTONVPN_TIER:-NA}
tier = ${CFG_TIER}
default_protocol = ${CFG_PROTO}
# Indicates that protonvpn init has been successful
initialized = 1
dns_leak_protection = ${DNS_LEAK_PROTECTION}
custom_dns = None
check_update_interval = 3
killswitch = 0
split_tunnel = ${ENABLE_SPLIT_TUNNEL}

[metadata]
last_api_pull = ${__METADATA_PULL_DATE}
last_update_check = 0
EOF

if [[ ${ENABLE_SPLIT_TUNNEL} -eq 1 ]];then
  echo "[VPN-Config-Setup] Writing Split Tunnel Config file"
  printf "%s\n" "${SPLIT_TUNNEL_CIDRS[@]}" > /root/.pvpn-cli/split_tunnel.txt
fi

echo "[VPN-Config-Setup] Writing credentials file"
# https://github.com/ProtonVPN/linux-cli/blob/089af8d309cf774adc31c158a62a27733ae39ee0/protonvpn_cli/utils.py#L530
cat > /root/.pvpn-cli/pvpnpass <<EOF
${PROTONVPN_USERNAME}+plc
${PROTONVPN_PASSWORD}
EOF

echo "[VPN-Config-Setup] Restrict credentials file"
chmod 600 /root/.pvpn-cli/pvpn-cli.cfg
