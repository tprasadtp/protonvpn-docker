#!/bin/bash
# SPDX-FileCopyrightText: Copyright 2024 Prasad Tengse
# SPDX-License-Identifier: GPLv3-only

# Wrapper which behaves like go build just enough for goreleaser to work.

set -eo pipefail

log() {
    local lvl_msg="$*"
    printf "%s \n" "$lvl_msg"
}

if [[ $1 == "version" ]]; then
    # goreleaser insists on checking go version
    # even when using a custom go binary
    printf "goreleaser-wrapper version tip linux/amd64"
    exit 0

elif [[ $1 == "build" ]]; then

    # Get Version and commit from ld flags
    # -X main.version={{.Version}} -X main.commit={{.Commit}} -X main.date={{.Date}}

    shift

    declare -a go_build_args
    read -r -a go_build_args <<<"$build_args"

    log "Build Arguments = $*"

    while [[ ${1} != "" ]]; do
        case ${1} in
        main.version=*)
            PROTONWIRE_VERSION="${1##*=}"
            ;;
        main.commit=*)
            PROTONWIRE_COMMIT="${1##*=}"
            ;;
        -o=*)
            output_file="${1##*=}"
            ;;
        -o)
            shift
            output_file="${1}"
            ;;
        esac
        shift
    done

    if [[ -z ${output_file} ]]; then
        log "output flag not defined"
        exit 1
    fi

    # Inject version and commit info
    if [[ -n $PROTONWIRE_COMMIT ]] && [[ -n $PROTONWIRE_VERSION ]]; then
        log "Injecting build info and saving output to ${output_file}"
        log "PROTONWIRE_COMMIT=$PROTONWIRE_COMMIT"
        log "PROTONWIRE_VERSION=$PROTONWIRE_VERSION"
        # dont change spaces as it invalidates shfmt.
        sed "/#diana::dynamic:version:begin#/,/#diana::dynamic:version:end#/!b;//!d;/#diana::dynamic:version:end#/e echo '    local PROTONWIRE_VERSION=\"$PROTONWIRE_VERSION\"\n    local PROTONWIRE_COMMIT=\"$PROTONWIRE_COMMIT\"'" \
            protonwire | install -m 755 /dev/stdin "${output_file}"
    else
        log "Saving output to ${output_file}"
        install -m 755 protonwire "${output_file}"
    fi
else
    log "Unknown wrapper command!"
    exit 1
fi
